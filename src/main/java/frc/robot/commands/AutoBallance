// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.commands;

import frc.robot.Constants;
import frc.robot.subsystems.ExampleSubsystem;
import frc.robot.subsystems.FalconDrivetrain;
import frc.robot.subsystems.PoseEstimator;

import com.ctre.phoenix.CANifier.PWMChannel;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.SerialPort.Port;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.kinematics.DifferentialDriveWheelSpeeds;
import edu.wpi.first.math.trajectory.TrapezoidProfile;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.interfaces.Gyro;
import edu.wpi.first.wpilibj2.command.CommandBase;

/** An example command that uses an example subsystem. */
public class AutoBallance extends CommandBase {
  @SuppressWarnings({"PMD.UnusedPrivateField", "PMD.SingularField"})
  private final FalconDrivetrain m_driveTrain;
  private final SerialPort sPort = new SerialPort(200, Port.kUSB);

  private final AHRS gyro = new AHRS(Port.kUSB);
  private final PoseEstimator poseEstimatorSubsystem;
  private final double yawErrorMargin = 5;
  private final double pitchErrorMargin = 3;
  
  private boolean bBallenced = false;
  
  /**
   * Creates a new ExampleCommand.
   *
   * @param subsystem The subsystem used by this command.
   */
  public AutoBallance(FalconDrivetrain drive, PoseEstimator pose) {
    m_driveTrain = drive;
    poseEstimatorSubsystem = pose;
    // Use addRequirements() here to declare subsystem dependencies.
    addRequirements(drive);
    addRequirements(pose);

  }

  // Called when the command is initially scheduled.
  @Override
  public void initialize() {}

  // Called every time the scheduler runs while the command is scheduled.
  @Override
  public void execute() {
    Pose2d curretPose = poseEstimatorSubsystem.getCurrentPose();
    double currentRot = curretPose.getRotation().getDegrees() - 90;
    if ( Math.abs(currentRot) > yawErrorMargin){
        
        m_driveTrain.setSpeeds(new DifferentialDriveWheelSpeeds(0,
        currentRot / 20));
    }
    else if (Math.abs(gyro.getPitch()) > pitchErrorMargin){
        m_driveTrain.setSpeeds(new DifferentialDriveWheelSpeeds(
        -gyro.getPitch()/20, 0));
      }
    else {
      bBallenced = true;
    }
  }

  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {}

  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    return bBallenced;
  }
}
